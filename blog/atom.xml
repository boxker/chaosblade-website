<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://chaosblade.io/blog</id>
    <title>ChaosBlade Blog</title>
    <updated>2022-09-15T00:32:26.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://chaosblade.io/blog"/>
    <subtitle>ChaosBlade Blog</subtitle>
    <icon>https://chaosblade.io/img/favicon/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[混沌工程介绍与实践]]></title>
        <id>/chaos-engineering</id>
        <link href="https://chaosblade.io/blog/chaos-engineering"/>
        <updated>2022-09-15T00:32:26.000Z</updated>
        <summary type="html"><![CDATA[本文会着重介绍什么是混沌工程，为什么需要混沌工程以及混沌工程相关工具与实践。]]></summary>
        <content type="html"><![CDATA[<p>在分布式系统架构下，服务间的依赖日益复杂，很难评估单个服务故障对整个系统的影响，并且请求链路长，监控告警的不完善导致发现问题、定位问题难度增大，同时业务和技术迭代快，如何持续保障系统的稳定性和高可用性受到很大的挑战。我们知道发生故障的那一刻不是由你来选择的，而是那一刻来选择你，你能做的就是为之做好准备。所以构建稳定性系统很重要的一环是混沌工程，在可控范围或环境下，通过故障注入，来持续提升系统的稳定性和高可用能力。<br>
<!-- -->本文会着重介绍什么是混沌工程，为什么需要混沌工程以及混沌工程相关工具与实践。如有遗漏或错误，欢迎补充指正。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="目录">目录<a class="hash-link" href="#目录" title="Direct link to heading">​</a></h2><ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E6%B7%B7%E6%B2%8C%E5%B7%A5%E7%A8%8B">什么是混沌工程</a></li><li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E6%B7%B7%E6%B2%8C%E5%B7%A5%E7%A8%8B">为什么需要混沌工程</a></li><li><a href="#%E6%B7%B7%E6%B2%8C%E5%B7%A5%E7%A8%8B%E5%AE%9E%E6%96%BD%E5%8E%9F%E5%88%99">混沌工程实施原则</a></li><li><a href="#%E6%B7%B7%E6%B2%8C%E5%B7%A5%E7%A8%8B%E5%AE%9E%E6%96%BD%E6%AD%A5%E9%AA%A4">混沌工程实施步骤</a></li><li><a href="#%E6%8E%A8%E8%8D%90%E5%B7%A5%E5%85%B7%E4%BA%A7%E5%93%81">推荐工具&amp;产品</a></li><li><a href="#%E6%B7%B7%E6%B2%8C%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5%E6%A1%88%E4%BE%8B">混沌工程实践案例</a></li><li><a href="#%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0%E4%BA%A4%E6%B5%81%E7%BE%A4">相关文章&amp;交流群</a></li><li><a href="#%E5%8A%A0%E5%85%A5%E6%88%91%E4%BB%AC">加入我们</a></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="什么是混沌工程">什么是混沌工程<a class="hash-link" href="#什么是混沌工程" title="Direct link to heading">​</a></h2><p>混沌工程是在 <a href="https://principlesofchaos.org/" target="_blank" rel="noopener noreferrer">混沌工程理论</a> 一文中提出，但在 2010 年 Netflix 从物理机基础设施迁移到 AWS 过程中，为保证 EC2 实例故障不会对业务造成影响，其团队开发出了杀 EC2 实例的工具，这也是混沌工程的雏形。在 2015 年社区发布《混沌工程理论》一文后，混沌工程开始快速发展。<br>
<!-- -->混沌工程是在分布式系统上进行实验的学科，旨在提升系统容错性，建立系统抵御生产环境中发生不可预知问题的信心。”打不倒我的必使我强大“，尼采的这句话很好了诠释了混沌工程反脆弱的思想。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="为什么需要混沌工程">为什么需要混沌工程<a class="hash-link" href="#为什么需要混沌工程" title="Direct link to heading">​</a></h2><p>分布式系统日益复杂，而且在系统逐渐云化的背景下，系统的稳定性受到很大的挑战。这里从四个角色来说明混沌工程的重要性。</p><ul><li>对于架构师来说，可以验证系统架构的容错能力，比如验证现在提倡的面向失败设计的系统；</li><li>对于开发和运维，可以提高故障的应急效率，实现故障告警、定位、恢复的有效和高效性。</li><li>对于测试来说，可以弥补传统测试方法留下的空白，之前的测试方法基本上是从用户的角度去做，而混沌工程是从系统的角度进行测试，降低故障复发率。</li><li>对于产品和设计，通过混沌事件查看产品的表现，提升客户使用体验。所以说混沌工程面向的不仅仅是开发、测试，拥有最好的客户体验是每个人的目标
所以实施混沌工程，可以提早发现生产环境上的问题，并且可以以战养战，提升故障应急效率和可以使用体验，逐渐建设高可用的韧性系统。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="混沌工程实施原则">混沌工程实施原则<a class="hash-link" href="#混沌工程实施原则" title="Direct link to heading">​</a></h2><p><img loading="lazy" src="https://user-images.githubusercontent.com/3992234/63409822-858d2f80-c424-11e9-9aac-58f34a0f5c6d.png" alt="chaos-eng-rules" class="img_ev3q"></p><ul><li>第一条：”建立一个围绕稳定状态行为的假说“，其包含两个含义，一个是定义能直接反应业务服务的监控指标，需要注意的是这里的监控指标并不是系统资源指标，比如CPU、内存等，这里的监控指标是能直接衡量系统服务质量的业务监控。举个例子，一个调用延迟故障，请求的 RT 会变长，对上层交易量造成下跌的影响，那么这里交易量就可以作为一个监控指标。这条原则的另一个含义是故障触发时，对系统行为作出假设以及监控指标的预期变化。</li><li>第二条指模拟生产环境中真实的或有理论依据的故障场景，比如依赖的服务调用延迟、超时、异常等。</li><li>第三条建议在生产环境中运行实验，但也不是说必须在生产环境中执行，只是实验环境越真实，混沌工程越有价值，但如果知道系统在某个故障场景下不具备容灾能力，不可以执行此混沌实验，避免资损发生。</li><li>第四条，持续的执行才能持续的降低故障复发率和提前发现故障，所以需要持续的自动化运行试验。</li><li>最后一个，混沌工程很重要的一点是控制爆炸半径，也就是试验影响面，防止预期外的资损发生，可以通过环境隔离或者故障注入工具提供的配置粒度来控制。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="混沌工程实施步骤">混沌工程实施步骤<a class="hash-link" href="#混沌工程实施步骤" title="Direct link to heading">​</a></h2><ul><li>制订混沌实验计划</li><li>定义系统稳态指标</li><li>做出系统容错行为假设</li><li>执行混沌实验</li><li>检查系统稳态指标</li><li>记录&amp;恢复混沌实验</li><li>修复发现的问题</li><li>自动化持续进行验证</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="推荐工具产品">推荐工具产品<a class="hash-link" href="#推荐工具产品" title="Direct link to heading">​</a></h2><p><img loading="lazy" src="https://user-images.githubusercontent.com/3992234/63409859-9473e200-c424-11e9-89bc-09eff69dd390.jpg" alt="awesome-chaos-engineering.png" class="img_ev3q">
大家可以从工具的场景丰富度、类型、易用性等方面来选择一款合适的工具，awesome-chaos-engineering Github 项目收纳了一些开源的混沌工程工具，在 CNCF Landscape 中混沌工程作为单独的一个领域存在，并且收纳了一些主流的工具，包含阿里巴巴开源的 ChaosBlade 工具和 AHAS 阿里云产品。
<img loading="lazy" src="https://user-images.githubusercontent.com/3992234/63409944-b705fb00-c424-11e9-887f-5e057b31536a.jpg" alt="cncf-landscape.png" class="img_ev3q">
下文重点介绍 ChaosBlade 及其相关实践。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="chaosblade">ChaosBlade<a class="hash-link" href="#chaosblade" title="Direct link to heading">​</a></h3><p>ChaosBlade 中文名混沌之刃，是一款混沌实验实施工具，支持丰富的实验场景，比如应用、容器、基础资源等。工具使用简单，扩展方便，其遵循社区提出的混沌实验模型。Github 地址：<a href="https://github.com/chaosblade-io/chaosblade" target="_blank" rel="noopener noreferrer">https://github.com/chaosblade-io/chaosblade</a></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="功能和特点">功能和特点<a class="hash-link" href="#功能和特点" title="Direct link to heading">​</a></h4><p><strong>场景丰富度高</strong>
ChaosBlade 支持的混沌实验场景不仅覆盖基础资源，如 CPU 满载、磁盘 IO 高、网络延迟等，还包括运行在 JVM 上的应用实验场景，如 Dubbo 调用超时和调用异常、指定方法延迟或抛异常以及返回特定值等，同时涉及容器相关的实验，如杀容器、杀 Pod。后续会持续的增加实验场景。</p><p><strong>使用简洁，易于理解</strong>
ChaosBlade 通过 CLI 方式执行，具有友好的命令提示功能，可以简单快速的上手使用。命令的书写遵循阿里巴巴集团内多年故障测试和演练实践抽象出的故障注入模型，层次清晰，易于阅读和理解，降低了混沌工程实施的门槛。</p><p><strong>动态加载，无侵入</strong>
ChaosBlade采用动态故障注入的方式，执行混沌实验时用户系统不需要做任何系统改造或发布，开箱即用。</p><p><strong>场景扩展方便</strong>
所有的 ChaosBlade 实验执行器同样遵循上述提到的故障注入模型，使实验场景模型统一，便于开发和维护。模型本身通俗易懂，学习成本低，可以依据模型方便快捷的扩展更多的混沌实验场景。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="使用方式">使用方式<a class="hash-link" href="#使用方式" title="Direct link to heading">​</a></h4><p>在 ChaosBlade Release 页面下载最新版本的包，解压即用。如创建一个 CPU 满载实验，命令为：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">blade create cpu fullload</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>具体使用方式可详见：<a href="https://github.com/chaosblade-io/chaosblade/wiki/%E6%96%B0%E6%89%8B%E6%8C%87%E5%8D%97" target="_blank" rel="noopener noreferrer">ChaosBlade 新手指南</a></p><p>中文使用文档：<a href="https://chaosblade-io.gitbook.io/chaosblade-help-zh-cn/" target="_blank" rel="noopener noreferrer">帮助文档</a></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="混沌实验模型">混沌实验模型<a class="hash-link" href="#混沌实验模型" title="Direct link to heading">​</a></h4><p><img loading="lazy" src="https://user-images.githubusercontent.com/3992234/63409808-80c87b80-c424-11e9-9fa8-26b52e1fef73.jpg" class="img_ev3q">
该模型分四次，层层递进，很清晰的表达出对什么组件做实验，实验范围是什么，实验触发的匹配规则有哪些，执行什么实验。该模型简洁、通用，语言领域无关、易于实现。阿里集团内的 C++、NodeJS、Dart 应用以及容器平台的实验场景都基于此模型实现。此模型具有很重要的意义，依据此模型可以更精准的描述、更好的理解、更方便沉淀实验场景以及发掘更多的场景。依据此模型实现的工具更加规范、简洁。实验模型介绍可详见：<a href="https://github.com/chaosblade-io/chaosblade/wiki/%E6%B7%B7%E6%B2%8C%E5%AE%9E%E9%AA%8C%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener noreferrer">混沌实验模型介绍</a>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="混沌工程实践案例">混沌工程实践案例<a class="hash-link" href="#混沌工程实践案例" title="Direct link to heading">​</a></h2><p><img loading="lazy" src="https://user-images.githubusercontent.com/3992234/63409672-35ae6880-c424-11e9-8a93-f4b10bdf6afb.png" alt="Screen Shot 2019-08-21 at 2.44.42 P" class="img_ev3q">
此拓扑图来自于阿里云 AHAS 产品架构感知功能，可自动感知架构拓扑，并且可以展示进程、网络、节点等数据。这个分布式服务 Demo 分三级调用，consumer 调用 provider，provider 调用 base，同时 provider 还调用 mk-demo 数据库，provider 和 base 服务具有两个实例，在 AHAS 架构拓扑图上，我们点击一个实例节点，可以到非常清晰的调用关系。我们后面结合这个 Demo 去讲解实践。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="验证监控告警">验证监控告警<a class="hash-link" href="#验证监控告警" title="Direct link to heading">​</a></h3><p><img loading="lazy" src="https://user-images.githubusercontent.com/3992234/63409252-63df7880-c423-11e9-9b39-13e9e5dca075.png" alt="Screen Shot 2019-08-21 at 2.43.36 P" class="img_ev3q"><br>
<img loading="lazy" src="https://user-images.githubusercontent.com/3992234/63409276-6e017700-c423-11e9-945d-4312005ba27e.png" alt="Screen Shot 2019-08-21 at 2.43.58 P" class="img_ev3q">
案例一，我们验证系统的监控告警性有效性。按照前面提到的混沌工程实施步骤，那么这个案例执行的实验场景是数据库调用延迟，我们先定义监控指标：慢 SQL 数和告警信息，做出期望假设：慢 SQL 数增加，钉钉群收到慢 SQL 告警。接下来执行实验。我们直接使用 ChaosBlade 工具执行，可以看下左下角，我们对 demo-provider 注入调用 mysql 查询时，若数据库是 demo 且表名是 d_discount，则对 50% 的查询操作延迟 600 毫秒。我们使用阿里云产品 ARMS 做监控告警。大家可以看到，当执行完混沌实验后，很快钉钉群里就收到了报警。所以我们对比下之前定义的监控指标，是符合预期的。但需要注意的是这次符合预期并不代表以后也符合，所以需要通过混沌工程持续性的验证。出现慢 SQL，可通过 ARMS 的 <a href="https://help.aliyun.com/document_detail/63796.html" target="_blank" rel="noopener noreferrer">链路追踪</a> 来排查定位，可以很清楚的看出哪条语句执行慢。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="案例二">案例二<a class="hash-link" href="#案例二" title="Direct link to heading">​</a></h3><p><img loading="lazy" src="https://user-images.githubusercontent.com/3992234/63409297-778adf00-c423-11e9-9179-d991eab7b6db.png" alt="Screen Shot 2019-08-21 at 2.44.07 P" class="img_ev3q">
前面讲了一个符合预期的案例，我们再来看一个不符合预期的。此案例是验证系统异常实例隔离的能力，我们的 Demo 中 consumer 调用 provider 服务，provider 服务具有两个实例，我们对其中一个注入延迟故障，监控指标是 consumer 的 QPS，稳态在 510 左右。我们做的容错假设是系统会自动隔离或下线出问题的服务实例，防止请求路由的此实例，所有 QPS 会有短暂的下跌，但很快会恢复。这个案例，我们使用阿里云 AHAS 混沌实验平台来执行，我们对 demo-provider-1 注入延迟故障，基于此平台可以很方便的执行混沌实验。执行混沌实验后，QPS 下跌到 40 左右，很长时间没有自动恢复，所以不符合预期，我们通过人工的方式对该异常的实例做下线处理，很快就看到，consumer 的 QPS 恢复正常。所以我们通过混沌工程发现了系统问题，我们后面需要做就是记录此问题，并且推动修复，后续做持续性的验证。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="加入我们">加入我们<a class="hash-link" href="#加入我们" title="Direct link to heading">​</a></h2><ul><li>ChaosBlade 钉钉讨论群号：23177705</li></ul>]]></content>
        <author>
            <name>肖长军（穹谷，@xcaspar）</name>
            <uri>https://github.com/xcaspar</uri>
        </author>
        <category label="chaosblade" term="chaosblade"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[暑期2021]]></title>
        <id>/summer-2021</id>
        <link href="https://chaosblade.io/blog/summer-2021"/>
        <updated>2022-09-15T00:32:26.000Z</updated>
        <summary type="html"><![CDATA[开源软件供应链点亮计划]]></summary>
        <content type="html"><![CDATA[<p>欢迎参加<a href="https://summer.iscas.ac.cn/help/" target="_blank" rel="noopener noreferrer">开源软件供应链点亮计划</a> - 暑期 2021（以下简称 暑期 2021）是由 中国科学院软件研究所 与 openEuler 社区 共同举办的一项面向高校学生的暑期活动，旨在鼓励在校学生积极参与开源软件的开发维护，促进优秀开源软件社区的蓬勃发展。我们将联合各大开源社区，针对重要开源软件的开发与维护提供项目，并向全球高校学生开放报名。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="目录">目录<a class="hash-link" href="#目录" title="Direct link to heading">​</a></h2><ul><li><a href="#%E4%BB%BB%E5%8A%A1%E8%83%8C%E6%99%AF">任务背景</a></li><li><a href="#%E4%BB%BB%E5%8A%A1%E6%B8%85%E5%8D%95">任务清单</a></li><li><a href="#%E8%81%94%E7%B3%BB%E6%96%B9%E5%BC%8F">联系方式</a></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="任务背景">任务背景<a class="hash-link" href="#任务背景" title="Direct link to heading">​</a></h2><p><strong>将 ChaosBlade 事件导出到 SkyWalking &amp; Prometheus</strong></p><p>通常，系统在运行过程中会发生很多事件，如进程异常、重启、混沌实验等。事件的发生可能会影响系统的稳定性。因此，我们需要输出混沌实验的事件，然后我们可以将事件导入到 SkyWalking 和 Prometheus ，用于后续系统分析统计等场景的使用。</p><p><strong>chaosblade-box 支持演练工具 chaos-mesh</strong></p><p>chaosblade-box 是一个场景丰富的混沌工程平台，chaosblade-box 的出生就包含了工具市场和拓展演练工具的能力，目前包含演练工具 chaosblade 和 litmuschaos，本次任务我们需要拓展对 chaos-mesh 演练工具的支持。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="任务清单">任务清单<a class="hash-link" href="#任务清单" title="Direct link to heading">​</a></h2><p>本次“暑期2021”总共有两个任务，分别是：</p><ul><li>任务一：<a href="https://github.com/chaosblade-io/chaosblade/issues/499" target="_blank" rel="noopener noreferrer">将 ChaosBlade 事件导出到 SkyWalking &amp; Prometheus</a></li><li>任务二：<a href="https://github.com/chaosblade-io/chaosblade/issues/498" target="_blank" rel="noopener noreferrer">chaosblade-box 支持演练工具 chaos-mesh</a></li></ul><p>在上一节已经介绍了任务的背景，下面小节中我们将以“任务一”和“任务二”来区分任务。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="任务一">任务一<a class="hash-link" href="#任务一" title="Direct link to heading">​</a></h3><p>本次任务主要在 chaosblade 和 chaosblade-operator 项目编码即可，Github 地址:</p><ul><li>chaosblade: <a href="https://github.com/chaosblade-io/chaosblade" target="_blank" rel="noopener noreferrer">https://github.com/chaosblade-io/chaosblade</a></li><li>chaosblade-operator: <a href="https://github.com/chaosblade-io/chaosblade-operator" target="_blank" rel="noopener noreferrer">https://github.com/chaosblade-io/chaosblade-operator</a></li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="要求的技能">要求的技能<a class="hash-link" href="#要求的技能" title="Direct link to heading">​</a></h4><ul><li>Golang, Kubernetes</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="参考资料">参考资料<a class="hash-link" href="#参考资料" title="Direct link to heading">​</a></h4><ul><li><a href="https://github.com/chaosblade-io/chaosblade/wiki/%E6%96%B0%E6%89%8B%E6%8C%87%E5%8D%97" target="_blank" rel="noopener noreferrer">chaosblade 新手指南</a></li><li><a href="https://github.com/chaosblade-io/chaosblade/blob/master/CLOUDNATIVE.md" target="_blank" rel="noopener noreferrer">chaosblade-operator 实现方案</a></li><li><a href="https://github.com/chaosblade-io/chaosblade/issues/495" target="_blank" rel="noopener noreferrer">skywalking 事件相关</a></li><li><a href="https://prometheus.io/docs/instrumenting/writing_exporters/" target="_blank" rel="noopener noreferrer">prometheus 自定义exporter</a></li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="任务内容">任务内容<a class="hash-link" href="#任务内容" title="Direct link to heading">​</a></h4><ul><li>在 chaosblade cli 执行器上下文埋点，将演练创建、演练恢复、Java Agent 挂载等事件导出到 SkyWalking</li><li>在 chaosblade cli 执行器上下文埋点，将演练创建、演练恢复、Java Agent 挂载等事件导出到 Prometheus</li><li>在 chaosblade-operator 对 crd 监听器埋点，将 crd 状态的变更事件导出到 SkyWalking 和 Prometheus</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="实现步骤">实现步骤<a class="hash-link" href="#实现步骤" title="Direct link to heading">​</a></h4><ul><li>在 chaosblade exec 包下面分别包含很多执行器有 os、jvm、docker 等，需要对执行器的添加事件监听，来演练执行、演练恢复等事件</li><li>在 chaosblade-operator 项目下监听了 blade 自定义资源状态的变更，需要将 blade 状态的变更事件导出。</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="工作量">工作量<a class="hash-link" href="#工作量" title="Direct link to heading">​</a></h4><table><thead><tr><th>任务</th><th>工作量</th></tr></thead><tbody><tr><td>了解混沌工程和 ChaosBlade，能够使用 ChaosBlade 对主机和 K8S 注入故障</td><td>5</td></tr><tr><td>可以尝试搭建 minikube ，安装 chaosblade-operator，了解 Operator 实现</td><td>3</td></tr><tr><td>了解 SkyWalking 和 Prometheus</td><td>5</td></tr><tr><td>熟悉 Prometheus 的 exporter</td><td>5</td></tr><tr><td>了解 SkyWalking 的事件导入方式，可自行选择一种方案，参考 <a href="https://github.com/chaosblade-io/chaosblade/issues/495" target="_blank" rel="noopener noreferrer">ISSUE</a></td><td>5</td></tr><tr><td>熟悉 chaosblade 执行器的模型定义</td><td>3</td></tr><tr><td>在 chaosblade cli 执行器上下文埋点，将演练创建、演练恢复、Java Agent 挂载等事件导出到 SkyWalking</td><td>5</td></tr><tr><td>在 chaosblade cli 执行器上下文埋点，将演练创建、演练恢复、Java Agent 挂载等事件导出到 Prometheus</td><td>5</td></tr><tr><td>在 chaosblade operator 对 crd 监听器埋点，将 crd 状态的变更事件导出到 SkyWalking 和 Prometheus</td><td>5</td></tr><tr><td>单元测试</td><td>3</td></tr><tr><td>集成测试</td><td>5</td></tr><tr><td>PR 交付</td><td>2</td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_LWe7" id="任务二">任务二<a class="hash-link" href="#任务二" title="Direct link to heading">​</a></h3><p>本次任务主要在 chaosblade-box 编码即可，Github 地址：<a href="https://github.com/chaosblade-io/chaosblade-box" target="_blank" rel="noopener noreferrer">https://github.com/chaosblade-io/chaosblade-box</a> ，可以 litmuschaos 是如何接入到 chaosblade-box 的。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="要求的技能-1">要求的技能<a class="hash-link" href="#要求的技能-1" title="Direct link to heading">​</a></h4><ul><li>java</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="参考资料-1">参考资料<a class="hash-link" href="#参考资料-1" title="Direct link to heading">​</a></h4><ul><li><a href="https://www.yuque.com/docs/share/bc9ad412-6f96-463b-b72d-6773b5fb5ea3?#" target="_blank" rel="noopener noreferrer">chaosblade-box 用户手册</a></li><li><a href="https://www.yuque.com/docs/share/fa43fd1e-9de0-4f55-900b-08ab4e8cf06a?#" target="_blank" rel="noopener noreferrer">chaosblade-box 开发手册</a></li><li><a href="https://chaos-mesh.org/docs" target="_blank" rel="noopener noreferrer">chaos-mesh 文档</a></li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="任务内容-1">任务内容<a class="hash-link" href="#任务内容-1" title="Direct link to heading">​</a></h4><ul><li>添加 chaos-mesh 场景解析</li><li>添加 chaos-mesh 演练执行器</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="实现步骤-1">实现步骤<a class="hash-link" href="#实现步骤-1" title="Direct link to heading">​</a></h4><ul><li>在模块 chaosblade-box-scenario下添加一个 chaosblade-box-scenario-chaosmesh 的实现。</li><li>在模块 chaosblade-box-invoker 下添加一个 chaosblade-box-invoker-chaosmesh-kubeapi 实现。</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="工作量-1">工作量<a class="hash-link" href="#工作量-1" title="Direct link to heading">​</a></h4><table><thead><tr><th>任务</th><th>工作量</th></tr></thead><tbody><tr><td>了解 chaosblade-box，并且能部署和使用</td><td>5</td></tr><tr><td>了解 chaos-mesh，能使用 chaos-mesh 注入故障</td><td>5</td></tr><tr><td>了解 chaosblade-box 的工具市场设计，考虑如何接入 chaos-mesh</td><td>3</td></tr><tr><td>熟悉 chaos-mesh 的混沌实验模型和 CRD 定义</td><td>5</td></tr><tr><td>在 chaosblade-box 解析 chaos-mesh 的混沌实验模型和 CRD</td><td>5</td></tr><tr><td>熟悉 chaos-mesh 的演练创建的流程</td><td>5</td></tr><tr><td>在 chaosblade-box 创建 chaos-mesh 的演练</td><td>5</td></tr><tr><td>单元测试</td><td>3</td></tr><tr><td>集成测试</td><td>5</td></tr><tr><td>PR 交付</td><td>2</td></tr></tbody></table><h2 class="anchor anchorWithStickyNavbar_LWe7" id="联系方式">联系方式<a class="hash-link" href="#联系方式" title="Direct link to heading">​</a></h2><ul><li>ChaosBlade 钉钉讨论群号：23177705</li><li>邮箱：<a href="mailto:chaosblade.io.01@gmail.com" target="_blank" rel="noopener noreferrer">chaosblade.io.01@gmail.com</a></li></ul>]]></content>
        <author>
            <name>叶飞</name>
            <uri>https://github.com/tiny-x</uri>
        </author>
        <category label="chaosblade" term="chaosblade"/>
    </entry>
</feed>